ar1 = Array();
print count(ar1);
push(ar1, "val1");
print count(ar1) + " " + ar1[0];

for (i = 0; i < 10; ++i)
    push(ar1, 10 - i);

print count(ar1);

function bubblesort(&arr)
{
    cnt = count(arr);
    for (i = 0; i < cnt; ++i) {
        val = i;
        for (j = i + 1; j < cnt; ++j) {
            if (arr[j] < arr[val]) {
                val = j;
            }
        }
        swap(arr[i], arr[val]);
    }
}

ar1[0] = 23;
print "bubble";
bubblesort(ar1);
forEach(ar1, function(v) {
    print v;
});

print "index" + indexOf(ar1, 5);

// passing array to function as value
function passarray(arr)
{
    arr[0] = "he";
}

ar2 = Array();
push(ar2, "hello");
passarray(ar2);
assert("pass array to function by value", ar2[0] == "hello");

// assignment works like pointer assignment
ar3 = ar2;
ar3[0] = "he";
assert("array assignment", ar3[0] == "he");
assert("array assignment", ar2[0] == "he");

// copy using built-in function
ar4 = copy(ar3);
ar4[0] = "hello";
assert("array copy assignment", ar4[0] == "hello");
assert("array copy assignment", ar3[0] == "he");
assert("array copy assignment", ar2[0] == "he");

// array initializer
ar5 = Array(3, "he");
assert("array initializer", count(ar5) == 3);
assert("array initializer", ar5[0] == "he");
ar5[0] = "hello";
assert("array initializer", ar5[0] == "hello");
assert("array initializer", ar5[1] == "he");
assert("array initializer", ar5[2] == "he");

// multi-dimensional arrays
ar6 = Array(3, Array(3, "he"));
assert("2d array", count(ar6) == 3);
assert("2d array", count(ar6[0]) == 3);
assert("2d array", count(ar6[1]) == 3);
assert("2d array", count(ar6[2]) == 3);
ar6[2][1] = "hello";
ar6[1][0] = ar6[1][1] = ar6[1][2] = "test";
assert("2d array mult-subscript", ar6[2][1] == "hello");
assert("2d array mult-subscript", ar6[2][2] == "he");
assert("2d array mult-subscript", ar6[1][0] + ar6[1][1] + ar6[1][2] == "testtesttest");

// strings
str1 = "test";
assert("string count", count(str1) == 4);
assert("string []", str1[0] === 't');
assert("string []", str1[1] === 'e');
assert("string []", str1[2] === 's');
assert("string []", str1[3] === 't');

// object call
ar7 = Array(2);
ar7.push("t");
ar7.push("e");
ar7out = "";
ar7.forEach(function(v) {
    ar7out += v;
});
assert("object calls", ar7out == "te");

a8out = "";
Array(2, "t").forEach(function(v) {
    a8out += v;
});
assert("object calls", a8out == "tt");
