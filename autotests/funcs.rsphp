function inc(a){return a+1;}

function add(a,b){return a+b;}

function saxpy(a,x,y){return a*x+y;}


print inc(4);
print add(1,2);

print saxpy(3,4,1000);

a=3;
print a;
a=add(inc(a),10);
print a;

// call with less arguments
function tst(a, b)
{
    print a;
    print b;
}
tst(a);

// global variables
globs = 23;

function incglobs()
{
    globs++;
}

incglobs();
assert(globs == 24);
incglobs();
assert(globs == 25);

print "done-glob";

function outer()
{
    asd = 20;
    a = function() {
        asd++;
        globs++;
    };
    a();
    a();
    return asd;
}

assert(outer() == 22);
assert(globs == 27);
print "done-outer";

/* Overwriting builtin functions */
builtinCount = count;
count = function(e) {
    return builtinCount(e) * 2;
};
assert("overwriting builtins", Array(5, "s").count() == 10);

/* Function scopes */
print "Scopes";
scope1 = 23;
function scopetest()
{
    print scope1;
    print scope2;

    iscope1 = 1;

    t = function() {
        print scope1;
        print iscope1;
        print iscope2;
    };

    iscope2 = "ah";
    t();
}
scope2 = 20;
scopetest();

function isAlphabetic(c)
{
    return typeof(c) == "char" && ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'));
}
assert(isAlphabetic('Z'));
assert(isAlphabetic('a'));
assert(isAlphabetic('b'));
assert(isAlphabetic('O'));
assert(!isAlphabetic('_'));
